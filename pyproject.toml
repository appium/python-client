[project]
name = "Appium-Python-Client"
description = "Python client for Appium"
version = "5.2.1"
readme = "README.md"
license = "Apache-2.0"
license-files = ["LICENSE"]
authors = [
    {name = "Isaac Murchie", email = "isaac@saucelabs.com"},
]
maintainers = [
    {name = "Kazuaki Matsuo"},
    {name = "Mykola Mokhnach"},
    {name = "Mori Atsushi"},
]
keywords = ["appium", "selenium", "python client", "mobile automation"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Environment :: Console",
    "Topic :: Software Development :: Testing",
]
requires-python = ">=3.9"
dependencies = [
  "selenium>=4.26,<5.0",
  "typing-extensions~=4.13",
]

[project.urls]
Homepage = "http://appium.io/"
Repository = "https://github.com/appium/python-client"
Issues = "https://github.com/appium/python-client/issues"
Changelog = "https://github.com/appium/python-client/blob/master/CHANGELOG.md"

[tool.uv]
dev-dependencies = [
  "httpretty~=1.1",
  "mock~=5.2",
  "mypy~=1.17",
  "pre-commit~=4.2",
  "pytest~=8.4",
  "pytest-cov~=6.2",
  "pytest-xdist~=3.8",
  "python-dateutil~=2.9",
  "ruff~=0.12",
  "types-python-dateutil~=2.9",

  # for release
  "python-semantic-release~=10.3.1",

  # for documentation
  "sphinx>=4.0,<9.0",
  "sphinx_rtd_theme~=3.0",
  "sphinxcontrib-apidoc~=0.6",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "regex"
path = "appium/version.py"
pattern = "(?P<version>\\d+\\.\\d+\\.\\d+)"

[tool.hatch.build]
exclude = [
  "test/",
  "script/",
  "release.sh"
]

[tool.hatch.build.targets.wheel]
packages = ["appium"]

[tool.semantic_release]
assets = []
build_command = """
    uv lock --upgrade-package "$PACKAGE_NAME"
    git add uv.lock
    uv build
"""
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = false
no_git_verify = false
tag_format = "v{version}"
version_toml = ["pyproject.toml:project.version"]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "update"
insertion_flag = "=========\nCHANGELOG\n========="
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = true

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
